// Code generated from compiler\TSwiftLexer.g4 by ANTLR 4.13.0. DO NOT EDIT.

package compiler

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type TSwiftLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var TSwiftLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func tswiftlexerLexerInit() {
	staticData := &TSwiftLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "", "", "", "';'", "", "'let'", "'var'", "'func'", "'struct'", "'if'",
		"'else'", "'switch'", "'case'", "'default'", "'for'", "'while'", "'break'",
		"'continue'", "'return'", "'Int'", "'Float'", "'String'", "'Bool'",
		"'Character'", "", "", "", "", "'nil'", "", "'+'", "'-'", "'*'", "'/'",
		"'%'", "'='", "'+='", "'-='", "'=='", "'!='", "'<'", "'<='", "'>'",
		"'>='", "'&&'", "'||'", "'!'", "'('", "')'", "'{'", "'}'", "'['", "']'",
		"','", "'.'", "':'", "'->'", "'?'",
	}
	staticData.SymbolicNames = []string{
		"", "WS", "COMMENT", "MULTILINE_COMMENT", "SEMICOLON", "NEWLINE", "LET_KW",
		"VAR_KW", "FUNC_KW", "STRUCT_KW", "IF_KW", "ELSE_KW", "SWITCH_KW", "CASE_KW",
		"DEFAULT_KW", "FOR_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW",
		"INTEGER_TYPE", "FLOAT_TYPE", "STRING_TYPE", "BOOL_TYPE", "CHARACTER_TYPE",
		"INTEGER_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", "BOOL_LITERAL",
		"NIL_LITERAL", "ID", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUALS",
		"PLUS_EQUALS", "MINUS_EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", "LESS_THAN",
		"LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "AND",
		"OR", "NOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK",
		"COMMA", "DOT", "COLON", "ARROW", "INTERROGATION",
	}
	staticData.RuleNames = []string{
		"WS", "COMMENT", "MULTILINE_COMMENT", "SEMICOLON", "NEWLINE", "LET_KW",
		"VAR_KW", "FUNC_KW", "STRUCT_KW", "IF_KW", "ELSE_KW", "SWITCH_KW", "CASE_KW",
		"DEFAULT_KW", "FOR_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW",
		"INTEGER_TYPE", "FLOAT_TYPE", "STRING_TYPE", "BOOL_TYPE", "CHARACTER_TYPE",
		"INTEGER_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", "BOOL_LITERAL",
		"NIL_LITERAL", "ID", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUALS",
		"PLUS_EQUALS", "MINUS_EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", "LESS_THAN",
		"LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "AND",
		"OR", "NOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK",
		"COMMA", "DOT", "COLON", "ARROW", "INTERROGATION", "ESC_SEQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 58, 388, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 1, 0, 4, 0, 121, 8, 0, 11, 0, 12, 0, 122, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 131, 8, 1, 10, 1, 12, 1, 134, 9, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 144, 8, 2, 10, 2, 12,
		2, 147, 9, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 3, 4, 157,
		8, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9,
		1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 4, 24, 274, 8,
		24, 11, 24, 12, 24, 275, 1, 25, 4, 25, 279, 8, 25, 11, 25, 12, 25, 280,
		1, 25, 1, 25, 4, 25, 285, 8, 25, 11, 25, 12, 25, 286, 1, 26, 1, 26, 1,
		26, 5, 26, 292, 8, 26, 10, 26, 12, 26, 295, 9, 26, 1, 26, 1, 26, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 308, 8,
		27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 5, 29, 316, 8, 29, 10, 29,
		12, 29, 319, 9, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1,
		33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37,
		1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1,
		41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45,
		1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1,
		50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1, 55,
		1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 2, 132, 145, 0,
		59, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21,
		11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39,
		20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57,
		29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75,
		38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93,
		47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55,
		111, 56, 113, 57, 115, 58, 117, 0, 1, 0, 6, 2, 0, 9, 9, 32, 32, 1, 0, 48,
		57, 4, 0, 10, 10, 13, 13, 34, 34, 92, 92, 3, 0, 65, 90, 95, 95, 97, 122,
		4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 8, 0, 34, 34, 39, 39, 92, 92, 98,
		98, 102, 102, 110, 110, 114, 114, 116, 116, 397, 0, 1, 1, 0, 0, 0, 0, 3,
		1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11,
		1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0,
		19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0,
		0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0,
		0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0,
		0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1,
		0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57,
		1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0,
		65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0,
		0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0,
		0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0,
		0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1,
		0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103,
		1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0,
		0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 1, 120, 1,
		0, 0, 0, 3, 126, 1, 0, 0, 0, 5, 139, 1, 0, 0, 0, 7, 153, 1, 0, 0, 0, 9,
		156, 1, 0, 0, 0, 11, 160, 1, 0, 0, 0, 13, 164, 1, 0, 0, 0, 15, 168, 1,
		0, 0, 0, 17, 173, 1, 0, 0, 0, 19, 180, 1, 0, 0, 0, 21, 183, 1, 0, 0, 0,
		23, 188, 1, 0, 0, 0, 25, 195, 1, 0, 0, 0, 27, 200, 1, 0, 0, 0, 29, 208,
		1, 0, 0, 0, 31, 212, 1, 0, 0, 0, 33, 218, 1, 0, 0, 0, 35, 224, 1, 0, 0,
		0, 37, 233, 1, 0, 0, 0, 39, 240, 1, 0, 0, 0, 41, 244, 1, 0, 0, 0, 43, 250,
		1, 0, 0, 0, 45, 257, 1, 0, 0, 0, 47, 262, 1, 0, 0, 0, 49, 273, 1, 0, 0,
		0, 51, 278, 1, 0, 0, 0, 53, 288, 1, 0, 0, 0, 55, 307, 1, 0, 0, 0, 57, 309,
		1, 0, 0, 0, 59, 313, 1, 0, 0, 0, 61, 320, 1, 0, 0, 0, 63, 322, 1, 0, 0,
		0, 65, 324, 1, 0, 0, 0, 67, 326, 1, 0, 0, 0, 69, 328, 1, 0, 0, 0, 71, 330,
		1, 0, 0, 0, 73, 332, 1, 0, 0, 0, 75, 335, 1, 0, 0, 0, 77, 338, 1, 0, 0,
		0, 79, 341, 1, 0, 0, 0, 81, 344, 1, 0, 0, 0, 83, 346, 1, 0, 0, 0, 85, 349,
		1, 0, 0, 0, 87, 351, 1, 0, 0, 0, 89, 354, 1, 0, 0, 0, 91, 357, 1, 0, 0,
		0, 93, 360, 1, 0, 0, 0, 95, 362, 1, 0, 0, 0, 97, 364, 1, 0, 0, 0, 99, 366,
		1, 0, 0, 0, 101, 368, 1, 0, 0, 0, 103, 370, 1, 0, 0, 0, 105, 372, 1, 0,
		0, 0, 107, 374, 1, 0, 0, 0, 109, 376, 1, 0, 0, 0, 111, 378, 1, 0, 0, 0,
		113, 380, 1, 0, 0, 0, 115, 383, 1, 0, 0, 0, 117, 385, 1, 0, 0, 0, 119,
		121, 7, 0, 0, 0, 120, 119, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122, 120,
		1, 0, 0, 0, 122, 123, 1, 0, 0, 0, 123, 124, 1, 0, 0, 0, 124, 125, 6, 0,
		0, 0, 125, 2, 1, 0, 0, 0, 126, 127, 5, 47, 0, 0, 127, 128, 5, 47, 0, 0,
		128, 132, 1, 0, 0, 0, 129, 131, 9, 0, 0, 0, 130, 129, 1, 0, 0, 0, 131,
		134, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 132, 130, 1, 0, 0, 0, 133, 135,
		1, 0, 0, 0, 134, 132, 1, 0, 0, 0, 135, 136, 5, 10, 0, 0, 136, 137, 1, 0,
		0, 0, 137, 138, 6, 1, 0, 0, 138, 4, 1, 0, 0, 0, 139, 140, 5, 47, 0, 0,
		140, 141, 5, 42, 0, 0, 141, 145, 1, 0, 0, 0, 142, 144, 9, 0, 0, 0, 143,
		142, 1, 0, 0, 0, 144, 147, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 145, 143,
		1, 0, 0, 0, 146, 148, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 148, 149, 5, 42,
		0, 0, 149, 150, 5, 47, 0, 0, 150, 151, 1, 0, 0, 0, 151, 152, 6, 2, 0, 0,
		152, 6, 1, 0, 0, 0, 153, 154, 5, 59, 0, 0, 154, 8, 1, 0, 0, 0, 155, 157,
		5, 13, 0, 0, 156, 155, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 158, 1, 0,
		0, 0, 158, 159, 5, 10, 0, 0, 159, 10, 1, 0, 0, 0, 160, 161, 5, 108, 0,
		0, 161, 162, 5, 101, 0, 0, 162, 163, 5, 116, 0, 0, 163, 12, 1, 0, 0, 0,
		164, 165, 5, 118, 0, 0, 165, 166, 5, 97, 0, 0, 166, 167, 5, 114, 0, 0,
		167, 14, 1, 0, 0, 0, 168, 169, 5, 102, 0, 0, 169, 170, 5, 117, 0, 0, 170,
		171, 5, 110, 0, 0, 171, 172, 5, 99, 0, 0, 172, 16, 1, 0, 0, 0, 173, 174,
		5, 115, 0, 0, 174, 175, 5, 116, 0, 0, 175, 176, 5, 114, 0, 0, 176, 177,
		5, 117, 0, 0, 177, 178, 5, 99, 0, 0, 178, 179, 5, 116, 0, 0, 179, 18, 1,
		0, 0, 0, 180, 181, 5, 105, 0, 0, 181, 182, 5, 102, 0, 0, 182, 20, 1, 0,
		0, 0, 183, 184, 5, 101, 0, 0, 184, 185, 5, 108, 0, 0, 185, 186, 5, 115,
		0, 0, 186, 187, 5, 101, 0, 0, 187, 22, 1, 0, 0, 0, 188, 189, 5, 115, 0,
		0, 189, 190, 5, 119, 0, 0, 190, 191, 5, 105, 0, 0, 191, 192, 5, 116, 0,
		0, 192, 193, 5, 99, 0, 0, 193, 194, 5, 104, 0, 0, 194, 24, 1, 0, 0, 0,
		195, 196, 5, 99, 0, 0, 196, 197, 5, 97, 0, 0, 197, 198, 5, 115, 0, 0, 198,
		199, 5, 101, 0, 0, 199, 26, 1, 0, 0, 0, 200, 201, 5, 100, 0, 0, 201, 202,
		5, 101, 0, 0, 202, 203, 5, 102, 0, 0, 203, 204, 5, 97, 0, 0, 204, 205,
		5, 117, 0, 0, 205, 206, 5, 108, 0, 0, 206, 207, 5, 116, 0, 0, 207, 28,
		1, 0, 0, 0, 208, 209, 5, 102, 0, 0, 209, 210, 5, 111, 0, 0, 210, 211, 5,
		114, 0, 0, 211, 30, 1, 0, 0, 0, 212, 213, 5, 119, 0, 0, 213, 214, 5, 104,
		0, 0, 214, 215, 5, 105, 0, 0, 215, 216, 5, 108, 0, 0, 216, 217, 5, 101,
		0, 0, 217, 32, 1, 0, 0, 0, 218, 219, 5, 98, 0, 0, 219, 220, 5, 114, 0,
		0, 220, 221, 5, 101, 0, 0, 221, 222, 5, 97, 0, 0, 222, 223, 5, 107, 0,
		0, 223, 34, 1, 0, 0, 0, 224, 225, 5, 99, 0, 0, 225, 226, 5, 111, 0, 0,
		226, 227, 5, 110, 0, 0, 227, 228, 5, 116, 0, 0, 228, 229, 5, 105, 0, 0,
		229, 230, 5, 110, 0, 0, 230, 231, 5, 117, 0, 0, 231, 232, 5, 101, 0, 0,
		232, 36, 1, 0, 0, 0, 233, 234, 5, 114, 0, 0, 234, 235, 5, 101, 0, 0, 235,
		236, 5, 116, 0, 0, 236, 237, 5, 117, 0, 0, 237, 238, 5, 114, 0, 0, 238,
		239, 5, 110, 0, 0, 239, 38, 1, 0, 0, 0, 240, 241, 5, 73, 0, 0, 241, 242,
		5, 110, 0, 0, 242, 243, 5, 116, 0, 0, 243, 40, 1, 0, 0, 0, 244, 245, 5,
		70, 0, 0, 245, 246, 5, 108, 0, 0, 246, 247, 5, 111, 0, 0, 247, 248, 5,
		97, 0, 0, 248, 249, 5, 116, 0, 0, 249, 42, 1, 0, 0, 0, 250, 251, 5, 83,
		0, 0, 251, 252, 5, 116, 0, 0, 252, 253, 5, 114, 0, 0, 253, 254, 5, 105,
		0, 0, 254, 255, 5, 110, 0, 0, 255, 256, 5, 103, 0, 0, 256, 44, 1, 0, 0,
		0, 257, 258, 5, 66, 0, 0, 258, 259, 5, 111, 0, 0, 259, 260, 5, 111, 0,
		0, 260, 261, 5, 108, 0, 0, 261, 46, 1, 0, 0, 0, 262, 263, 5, 67, 0, 0,
		263, 264, 5, 104, 0, 0, 264, 265, 5, 97, 0, 0, 265, 266, 5, 114, 0, 0,
		266, 267, 5, 97, 0, 0, 267, 268, 5, 99, 0, 0, 268, 269, 5, 116, 0, 0, 269,
		270, 5, 101, 0, 0, 270, 271, 5, 114, 0, 0, 271, 48, 1, 0, 0, 0, 272, 274,
		7, 1, 0, 0, 273, 272, 1, 0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 273, 1, 0,
		0, 0, 275, 276, 1, 0, 0, 0, 276, 50, 1, 0, 0, 0, 277, 279, 7, 1, 0, 0,
		278, 277, 1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 278, 1, 0, 0, 0, 280,
		281, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282, 284, 5, 46, 0, 0, 283, 285,
		7, 1, 0, 0, 284, 283, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286, 284, 1, 0,
		0, 0, 286, 287, 1, 0, 0, 0, 287, 52, 1, 0, 0, 0, 288, 293, 5, 34, 0, 0,
		289, 292, 8, 2, 0, 0, 290, 292, 3, 117, 58, 0, 291, 289, 1, 0, 0, 0, 291,
		290, 1, 0, 0, 0, 292, 295, 1, 0, 0, 0, 293, 291, 1, 0, 0, 0, 293, 294,
		1, 0, 0, 0, 294, 296, 1, 0, 0, 0, 295, 293, 1, 0, 0, 0, 296, 297, 5, 34,
		0, 0, 297, 54, 1, 0, 0, 0, 298, 299, 5, 116, 0, 0, 299, 300, 5, 114, 0,
		0, 300, 301, 5, 117, 0, 0, 301, 308, 5, 101, 0, 0, 302, 303, 5, 102, 0,
		0, 303, 304, 5, 97, 0, 0, 304, 305, 5, 108, 0, 0, 305, 306, 5, 115, 0,
		0, 306, 308, 5, 101, 0, 0, 307, 298, 1, 0, 0, 0, 307, 302, 1, 0, 0, 0,
		308, 56, 1, 0, 0, 0, 309, 310, 5, 110, 0, 0, 310, 311, 5, 105, 0, 0, 311,
		312, 5, 108, 0, 0, 312, 58, 1, 0, 0, 0, 313, 317, 7, 3, 0, 0, 314, 316,
		7, 4, 0, 0, 315, 314, 1, 0, 0, 0, 316, 319, 1, 0, 0, 0, 317, 315, 1, 0,
		0, 0, 317, 318, 1, 0, 0, 0, 318, 60, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0,
		320, 321, 5, 43, 0, 0, 321, 62, 1, 0, 0, 0, 322, 323, 5, 45, 0, 0, 323,
		64, 1, 0, 0, 0, 324, 325, 5, 42, 0, 0, 325, 66, 1, 0, 0, 0, 326, 327, 5,
		47, 0, 0, 327, 68, 1, 0, 0, 0, 328, 329, 5, 37, 0, 0, 329, 70, 1, 0, 0,
		0, 330, 331, 5, 61, 0, 0, 331, 72, 1, 0, 0, 0, 332, 333, 5, 43, 0, 0, 333,
		334, 5, 61, 0, 0, 334, 74, 1, 0, 0, 0, 335, 336, 5, 45, 0, 0, 336, 337,
		5, 61, 0, 0, 337, 76, 1, 0, 0, 0, 338, 339, 5, 61, 0, 0, 339, 340, 5, 61,
		0, 0, 340, 78, 1, 0, 0, 0, 341, 342, 5, 33, 0, 0, 342, 343, 5, 61, 0, 0,
		343, 80, 1, 0, 0, 0, 344, 345, 5, 60, 0, 0, 345, 82, 1, 0, 0, 0, 346, 347,
		5, 60, 0, 0, 347, 348, 5, 61, 0, 0, 348, 84, 1, 0, 0, 0, 349, 350, 5, 62,
		0, 0, 350, 86, 1, 0, 0, 0, 351, 352, 5, 62, 0, 0, 352, 353, 5, 61, 0, 0,
		353, 88, 1, 0, 0, 0, 354, 355, 5, 38, 0, 0, 355, 356, 5, 38, 0, 0, 356,
		90, 1, 0, 0, 0, 357, 358, 5, 124, 0, 0, 358, 359, 5, 124, 0, 0, 359, 92,
		1, 0, 0, 0, 360, 361, 5, 33, 0, 0, 361, 94, 1, 0, 0, 0, 362, 363, 5, 40,
		0, 0, 363, 96, 1, 0, 0, 0, 364, 365, 5, 41, 0, 0, 365, 98, 1, 0, 0, 0,
		366, 367, 5, 123, 0, 0, 367, 100, 1, 0, 0, 0, 368, 369, 5, 125, 0, 0, 369,
		102, 1, 0, 0, 0, 370, 371, 5, 91, 0, 0, 371, 104, 1, 0, 0, 0, 372, 373,
		5, 93, 0, 0, 373, 106, 1, 0, 0, 0, 374, 375, 5, 44, 0, 0, 375, 108, 1,
		0, 0, 0, 376, 377, 5, 46, 0, 0, 377, 110, 1, 0, 0, 0, 378, 379, 5, 58,
		0, 0, 379, 112, 1, 0, 0, 0, 380, 381, 5, 45, 0, 0, 381, 382, 5, 62, 0,
		0, 382, 114, 1, 0, 0, 0, 383, 384, 5, 63, 0, 0, 384, 116, 1, 0, 0, 0, 385,
		386, 5, 92, 0, 0, 386, 387, 7, 5, 0, 0, 387, 118, 1, 0, 0, 0, 12, 0, 122,
		132, 145, 156, 275, 280, 286, 291, 293, 307, 317, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TSwiftLexerInit initializes any static state used to implement TSwiftLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewTSwiftLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func TSwiftLexerInit() {
	staticData := &TSwiftLexerLexerStaticData
	staticData.once.Do(tswiftlexerLexerInit)
}

// NewTSwiftLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewTSwiftLexer(input antlr.CharStream) *TSwiftLexer {
	TSwiftLexerInit()
	l := new(TSwiftLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &TSwiftLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "TSwiftLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// TSwiftLexer tokens.
const (
	TSwiftLexerWS                    = 1
	TSwiftLexerCOMMENT               = 2
	TSwiftLexerMULTILINE_COMMENT     = 3
	TSwiftLexerSEMICOLON             = 4
	TSwiftLexerNEWLINE               = 5
	TSwiftLexerLET_KW                = 6
	TSwiftLexerVAR_KW                = 7
	TSwiftLexerFUNC_KW               = 8
	TSwiftLexerSTRUCT_KW             = 9
	TSwiftLexerIF_KW                 = 10
	TSwiftLexerELSE_KW               = 11
	TSwiftLexerSWITCH_KW             = 12
	TSwiftLexerCASE_KW               = 13
	TSwiftLexerDEFAULT_KW            = 14
	TSwiftLexerFOR_KW                = 15
	TSwiftLexerWHILE_KW              = 16
	TSwiftLexerBREAK_KW              = 17
	TSwiftLexerCONTINUE_KW           = 18
	TSwiftLexerRETURN_KW             = 19
	TSwiftLexerINTEGER_TYPE          = 20
	TSwiftLexerFLOAT_TYPE            = 21
	TSwiftLexerSTRING_TYPE           = 22
	TSwiftLexerBOOL_TYPE             = 23
	TSwiftLexerCHARACTER_TYPE        = 24
	TSwiftLexerINTEGER_LITERAL       = 25
	TSwiftLexerFLOAT_LITERAL         = 26
	TSwiftLexerSTRING_LITERAL        = 27
	TSwiftLexerBOOL_LITERAL          = 28
	TSwiftLexerNIL_LITERAL           = 29
	TSwiftLexerID                    = 30
	TSwiftLexerPLUS                  = 31
	TSwiftLexerMINUS                 = 32
	TSwiftLexerMULT                  = 33
	TSwiftLexerDIV                   = 34
	TSwiftLexerMOD                   = 35
	TSwiftLexerEQUALS                = 36
	TSwiftLexerPLUS_EQUALS           = 37
	TSwiftLexerMINUS_EQUALS          = 38
	TSwiftLexerEQUALS_EQUALS         = 39
	TSwiftLexerNOT_EQUALS            = 40
	TSwiftLexerLESS_THAN             = 41
	TSwiftLexerLESS_THAN_OR_EQUAL    = 42
	TSwiftLexerGREATER_THAN          = 43
	TSwiftLexerGREATER_THAN_OR_EQUAL = 44
	TSwiftLexerAND                   = 45
	TSwiftLexerOR                    = 46
	TSwiftLexerNOT                   = 47
	TSwiftLexerLPAREN                = 48
	TSwiftLexerRPAREN                = 49
	TSwiftLexerLBRACE                = 50
	TSwiftLexerRBRACE                = 51
	TSwiftLexerLBRACK                = 52
	TSwiftLexerRBRACK                = 53
	TSwiftLexerCOMMA                 = 54
	TSwiftLexerDOT                   = 55
	TSwiftLexerCOLON                 = 56
	TSwiftLexerARROW                 = 57
	TSwiftLexerINTERROGATION         = 58
)
